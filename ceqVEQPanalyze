#! /usr/bin/env perl

use strict;
use FindBin;
use POSIX;
use Math::Complex;


require $FindBin::RealBin . "/ceqAnalyzeCommon.pm";


my @input;
foreach my $str (@ARGV) {
	my @tmp_array = split(/,/, $str);
	push @input, @tmp_array;
}

if ($#input != 5) {
	my $cmd = `basename $0`;
	chomp $cmd;
	print "usage: $cmd PE0 PE1 PE2 PE3 PE4 FS (all positive value, except for PE4)\n";
	print "    +---------------------------------------+\n";
	print "    |                                 PE4    \\\n";
	print "    |                            +-----|>----(+)-------------------->\n";
	print "    |   PE0            PE1       |\n";
	print "  --+---|>-----( + )----|>---(+)-+-[ ]--+--|>----(+)-----+---+\n";
	print "    |           /\\ \\           \\        |  PE1     \\     |   |\n";
	print "   [ ]         /  \\ \\           +-------+           \\   [ ]  |\n";
	print "    |         /    \\ \\                  |            \\   |   |\n";
	print "    +---|>---+      \\ +-----<|----------+             +--+   |\n";
	print "        PE0          \\     -PE2                              |\n";
	print "                      +-----------------------<|-------------+\n";
	print "                                             -PE3\n";
	print "\n";
	print "\n";
	print "   // <for reference> registers as SSC\n";
	print "   //     |   address     |                       |   remarks    \n";
	print "   // PE0 | 0x07800-079ff | d0    d-1:-13   --    | 0x8000 = 1.0 \n";
	print "   // PE1 | 0x07a00-07bff | d0    d-1:-13   --    | 0x8000 = 1.0 \n";
	print "   // PE2 | 0x07c00-07dff | d3:0  d-1:-10   --    | 0x1000 = 1.0 \n";
	print "   // PE3 | 0x07e00-07fff |    d-1:-14      --    | 0x8000 = 0.5 \n";
	print "   // PE4 | 0x08000-081ff | d1:0  d-1:-12  --  bc | 0x4000 = 1.0 \n";
	exit 1;
}


my $isHexOnly = 1;
for (my $i = 0; $i < 5; $i++) {
	my $str = $input[$i];
	$isHexOnly &= ($str =~ /^0[Xx][0-9a-fA-F]+$/);
}

my ($PE0, $PE1, $PE2, $PE3, $PE4, $Fs);

if ($isHexOnly) {
	print "input is Hex Only, deal input data as SSC register\n";
	$PE0 = eval($input[0]) / 0x8000;
	$PE1 = eval($input[1]) / 0x8000;
	$PE2 = eval($input[2]) / 0x1000;
	$PE3 = eval($input[3]) / 0x10000;
	if (($input[4] & 0x0001) == 0) {
		$PE4 = (eval($input[4]) & 0xfffe) / 0x4000;
	} else {
		$PE4 = -(eval($input[4]) & 0xfffe) / 0x4000;
	}
	$Fs = $input[5];
} else {
	my @result;
	foreach my $str (@input) {
		my $val = ($str =~ /0[Xx]/) ? hex2dec($str) : eval($str);
		push @result, $val;
	}
	($PE0, $PE1, $PE2, $PE3, $PE4, $Fs) = @result;
}


my $a0 = $PE0;
my $a1 = $PE0;
my $fr0 = $PE1;
my $q = -$PE2;
my $fr1 = $PE1 * $PE3;
my $g = $PE4;

print "a0:$a0, a1:$a1, fr0:$fr0, q:$q, fr1:$fr1, g:$g\n";

# Transfer Function as PKG
#                            (a0 + a1 * z**-1) * fr0 * (1 - z**-1)
# H(z) = 1 + g * --------------------------------------------------------------------
#                1 - (fr0 * q + fr0 * fr1 * (-1) + 2) * z**-1 + (1 + fr0 * q) * z**-2


#as PKG
{
	my $ma0 = $a0 * $fr0;
	my $ma1 = (-$a0 + $a1) * $fr0;
	my $ma2 = -$a1 * $fr0;
	my $mb1 = $fr0 * $q - $fr0 * $fr1 + 2;
	my $mb2 = -(1 + $fr0 * $q);
	my $mm0 = 1.0;
	my $mm1 = $g;

	system ($FindBin::RealBin . "/ceqEAanalyze $ma0 $ma1 $ma2 $mb1 $mb2 $mm0 $mm1 $Fs");
}

