#! /usr/bin/env perl

use FindBin;

sub round {
	my($val) = @_;
	if ($val >= 0) { $val += 0.5; }
	else { $val -= 0.5; }
	return int($val);
}

sub my_hex_float {
	my ($str)=@_;
	if ($str =~ /([+-]?0[xX][0-9a-fA-F]+)(\.[0-9a-fA-F]*)?[pP]([+-]?\d+)/) {
		my ($int_val, $frac_val, $shift) = ($1, $2, $3);
		$frac_val =~ s/\.//;
		my $frac_digit = length($frac_val);
		$shift -= $frac_digit * 4;
		my $shift_val = 2**$shift;
		my $val = eval($int_val . $frac_val) * $shift_val;
		return $val;
	} else {
		return 0;
	}
}

sub hex2dec {
	my ($val) = @_;

	while ($val =~ /(.*)([+-]?0[xX][0-9a-fA-F]+)(\.[0-9a-fA-F]*)?([pP][+-]?\d+)(.*)/) {
		my ($pre, $hex_float_val, $post) = ($1, $2 . $3 . $4, $5);
		$val = $pre . my_hex_float($hex_float_val) . $post;
	}

	while ($val =~ /^(.*)(0[Xx][\da-fA-F]+)(.*)$/) {
		my ($pre, $hex, $post) = ($1, $2, $3);
		if ($hex =~ /0[Xx][\da-fA-F]{6}/) {			# CoefData
			$VAL1_0 = 0x00800000;
			$VAL_POS_MAX = 0x80000000;
		} else {
			$VAL1_0 = 0x8000;
			$VAL_POS_MAX = 0x8000;
		}
		my $dec;
		if (eval($hex) >= $VAL_POS_MAX) {
			$dec = (eval($hex) - $VAL_POS_MAX * 2) / $VAL1_0;
		} else {
			$dec = eval($hex) / $VAL1_0;
		}
		$val = $pre . $dec . $post;
	}
	$val =~ s/<</*2**/g;
	$val =~ s/>>/*2**-/g;
	return eval($val);
}

sub tan { sin($_[0]) / cos($_[0]); }

if ($#ARGV != 4) {
	my $cmd = `basename $0`;
	chomp $cmd;
	print "usage: $cmd PE0 PE1 PE2 PE3 PE4\n";
	print "    +---------------------------------------+\n";
	print "    |                                 PE4    \\\n";
	print "    |                            +-----|>----(+)-------------------->\n";
	print "    |   PE0            PE1       |\n";
	print "  --+---|>-----( + )----|>---(+)-+-[ ]--+--|>----(+)-----+---+\n";
	print "    |           /\\ \\           \\        |  PE1     \\     |   |\n";
	print "   [ ]         /  \\ \\           +-------+           \\   [ ]  |\n";
	print "    |         /    \\ \\                  |            \\   |   |\n";
	print "    +---|>---+      \\ +-----<|----------+             +--+   |\n";
	print "        PE0          \\     -PE2                              |\n";
	print "                      +-----------------------<|-------------+\n";
	print "                                             -PE3\n";
	exit 1;
}

$PE0 = shift;
$PE1 = shift;
$PE2 = shift;
$PE3 = shift;
$PE4 = shift;

$a0 = eval($PE0) / 0x8000;
$a1 = eval($PE0) / 0x8000;
$fr0 = eval($PE1) / 0x8000;
$q = -eval($PE2) / 0x8000 * 8;
$fr1 = $fr0 * eval($PE3) / 0x10000;
if (eval($PE4) & 0x0001) {
	$g = -(eval($PE4) & 0xfffe) / 0x8000 * 2;
} else {
	$g = (eval($PE4) & 0xfffe) / 0x8000 * 2;
}
$Fs = 44100;

print "a0:$a0, a1:$a1, fr0:$fr0, q:$q, fr1:$fr1, g:$g\n";

# Transfer Function as PKG
#                            (a0 + a1 * z**-1) * fr0 * (1 - z**-1)
# H(z) = 1 + g * --------------------------------------------------------------------
#                1 - (fr0 * q + fr0 * fr1 * (-1) + 2) * z**-1 + (1 + fr0 * q) * z**-2


#as PKG
{
	my $ma0 = $a0 * $fr0;
	my $ma1 = (-$a0 + $a1) * $fr0;
	my $ma2 = -$a1 * $fr0;
	my $mb1 = $fr0 * $q - $fr0 * $fr1 + 2;
	my $mb2 = -(1 + $fr0 * $q);
	my $mm0 = 1.0;
	my $mm1 = $g;

	system ($FindBin::RealBin . "/ceqEAanalyze $ma0 $ma1 $ma2 $mb1 $mb2 $mm0 $mm1 $Fs");
}

