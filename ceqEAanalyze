#! /usr/bin/env perl

use strict;
use FindBin;
use POSIX;
use Math::Complex;

require $FindBin::RealBin . "/ceqAnalyzeCommon.pm";
require $FindBin::RealBin . "/ceqAnalyzeCore.pm";



my %argument_hash = ParseArgument(\@ARGV);

if (($#{ $argument_hash{ "argument" } } != 5) && ($#{ $argument_hash{ "argument" } } != 7)) {
	my $cmd = `basename $0`;
	chomp $cmd;
	print "usage: $cmd a0 a1 a2 b1 b2 Fs\n";
	print " --+-|>---(+)------+--\n";
	print "   | a0  // \\\\     |  \n";
	print "   +-|>-+/   \\+-<|-+  \n";
	print "   | a1 /     \\ b1 |  \n";
	print "   +-|>+       +<|-+  \n";
	print "     a2         b2    \n";
	print "\n\n";
	print "usage: $cmd a0 a1 a2 b1 b2 m0 m1 Fs\n";
	print "   +------------------|>-+\n";
	print "   |                  m0  \\\n";
	print " --+-|>---(+)------+--|>--(+)--\n";
	print "   | a0  // \\\\     |  m1 \n";
	print "   +-|>-+/   \\+-<|-+  \n";
	print "   | a1 /     \\ b1 |  \n";
	print "   +-|>+       +<|-+  \n";
	print "     a2         b2    \n";
	print "\n\n";
	print "This calculation is based on the following analysis,\n";
	print "http://web.ck.miyakoda.roland.co.jp/piano/software/dsp/tools/filter_analyze.html\n";
	exit 1;
}

my $eb_alg = 0;
if ($#{ $argument_hash{ "argument" } } == 7) {
	$eb_alg = 1;
}

my $a0 = shift @{ $argument_hash{ "argument" } };
my $a1 = shift @{ $argument_hash{ "argument" } };
my $a2 = shift @{ $argument_hash{ "argument" } };
my $b1 = shift @{ $argument_hash{ "argument" } };
my $b2 = shift @{ $argument_hash{ "argument" } };
my $m0; my $m1;
if ($eb_alg) {
	$m0 = shift @{ $argument_hash{ "argument" } };
	$m1 = shift @{ $argument_hash{ "argument" } };
}
my $Fs = shift @{ $argument_hash{ "argument" } };

my $ERROR_LEVEL;
foreach my $key (keys %{ $argument_hash{ "option" } }) {
	my $val = $argument_hash{ "option" }->{ $key };
	print "option: $key: $val\n";
	if ($key eq "ERROR_LEVEL") { $ERROR_LEVEL = 1 / (1 << $val); }
}

if ($eb_alg) {
	$a0 = $m0 + $a0 * $m1;
	$a1 = -$m0 * $b1 + $a1 * $m1;
	$a2 = -$m0 * $b2 + $a2 * $m1;
}

if (($a2 != 0) || ($b2 != 0)) {	# 2nd order filter
	print "a0 as EA --> $a0\n";
	print "a1 as EA --> $a1\n";
	print "a2 as EA --> $a2\n";
	print "b1 as EA --> $b1\n";
	print "b2 as EA --> $b2\n";
} else {
	print "a0 as FA --> $a0\n";
	print "a1 as FA --> $a1\n";
	print "b1 as FA --> $b1\n";
}


my $result_ref = CeqAnalyzeCore($a0, $a1, $a2, $b1, $b2, $Fs, $ERROR_LEVEL);

if (defined($$result_ref{ memo })) { print $$result_ref{ memo } . "\n"; }

if ($$result_ref{ type } eq "ERROR") {
	exit 1;
} elsif ($$result_ref{ type } eq "THRU") {
	print "$$result_ref{ type }\n";
	print "          |\n";
	printf "%5.1f(dB) | --------------------\n", $$result_ref{ gain_dc };
	print "          |\n";
} elsif ($$result_ref{ type } =~ /HPF/) {
	print "$$result_ref{ type }\n";
	print "          |\n";
	printf "%5.1f(dB) |            +--------\n", $$result_ref{ gain_nyquist };
	print "          |           /\n";
	print "          |          /\n";
	print "          |         /\n";
	print "                       p\n";
	print "                       |\n";
	print "                       +--- $$result_ref{ freq_d } (Hz)\n";
	if ($$result_ref{ type } =~ /2$/) {
		printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
		printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	}
} elsif ($$result_ref{ type } =~ /LPF/) {
	print "$$result_ref{ type }\n";
	print "          |\n";
	printf "%5.1f(dB) | ------+\n", $$result_ref{ gain_dc };
	print "          |        \\\n";
	print "          |         \\\n";
	print "          |          \\\n";
	print "                  p\n";
	print "                  |\n";
	print "                  +-------- $$result_ref{ freq_d } (Hz)\n";
	if ($$result_ref{ type } =~ /2$/) {
		printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
		printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	}
} elsif ($$result_ref{ type } =~ /HI_BOOST/) {
	print "$$result_ref{ type }\n";
	print "          |\n";
	printf "%5.1f(dB) |          +--------\n", $$result_ref{ gain_nyquist };
	print "          |         /\n";
	print "          |        /\n";
	printf "%5.1f(dB) | ------+\n", $$result_ref{ gain_dc };
	print "                  z  p\n";
	print "                  |  |\n";
	print "                  |  +--- $$result_ref{ freq2_d } (Hz) (as analog: $$result_ref{ freq2_a } (Hz))\n";
	print "                  +------ $$result_ref{ freq1_d } (Hz)\n";
	if ($$result_ref{ type } =~ /2$/) {
		printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
		printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	}
} elsif ($$result_ref{ type } =~ /HI_CUT/) {
	print "$$result_ref{ type }\n";
	print "          |\n";
	printf "%5.1f(dB) | ------+\n", $$result_ref{ gain_dc };
	print "          |        \\\n";
	print "          |         \\\n";
	printf "%5.1f(dB) |          +--------\n", $$result_ref{ gain_nyquist };
	print "                  p  z\n";
	print "                  |  |\n";
	print "                  |  +--- $$result_ref{ freq2_d } (Hz) (as analog: $$result_ref{ freq2_a } (Hz))\n";
	print "                  +------ $$result_ref{ freq1_d } (Hz)\n";
	if ($$result_ref{ type } =~ /2$/) {
		printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
		printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	}
} elsif ($$result_ref{ type } =~ /APF/) {
	print "$$result_ref{ type }\n";
	print "          |\n";
	printf "%5.1f(dB) | --------------------\n", $$result_ref{ gain_dc };
	print "          |\n";
	if ($$result_ref{ type } =~ /2$/) {
		printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
		printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	}
} elsif ($$result_ref{ type } =~ /BPF/) {
	print "$$result_ref{ type }\n";
	print  "          |\n";
	printf "%5.1f(dB) |          +\n", $$result_ref{ gain_cutoff };
	print  "          |         / \\\n";
	print  "          |        /   \\\n";
	print  "          |       /     \\\n";
	print  "                     p\n";
	print  "                     |\n";
	print  "                     +-------- $$result_ref{ freq_d } (Hz)\n";
	if ($$result_ref{ type } =~ /2$/) {
		printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
		printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	}
} elsif ($$result_ref{ type } =~ /BEF/) {
	print "$$result_ref{ type }\n";
	print  "          |\n";
	printf "%5.1f(dB) |------+       +------ %5.1f(dB)\n", $$result_ref{ gain_dc }, $$result_ref{ gain_nyquist };
	print  "          |       \\     /\n";
	print  "          |        \\   /\n";
	print  "          |         \\ /\n";
	print  "          |           +\n";
	print  "                     p\n";
	print  "                     |\n";
	print  "                     +-------- $$result_ref{ freq_d } (Hz)\n";
	if ($$result_ref{ type } =~ /2$/) {
		printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
		printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	}
} elsif ($$result_ref{ type } =~ /PKG/) {
	print "$$result_ref{ type }\n";
	print  "          |\n";
	if ($$result_ref{ gain_pkg } >= 0) {
		printf "%5.1f(dB) |          +\n", $$result_ref{ gain_pkg };
		print  "          |         / \\\n";
		print  "          |        /   \\\n";
		printf "%5.1f(dB) |------+      +------ %5.1f(dB)\n", $$result_ref{ gain_dc }, $$result_ref{ gain_nyquist };
	} else {
		printf "%5.1f(dB) |------+      +------ %5.1f(dB)\n", $$result_ref{ gain_dc }, $$result_ref{ gain_nyquist };
		print  "          |        \\   /\n";
		print  "          |         \\ /\n";
		printf "%5.1f(dB) |          +\n", $$result_ref{ gain_pkg };
	}
	print  "                     p\n";
	print  "                     |\n";
	print  "                     +-------- $$result_ref{ freq_d } (Hz)\n";
	if ($$result_ref{ type } =~ /2$/) {
		printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
		printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	}
} elsif ($$result_ref{ type } eq "COMPLEX") {
	print "complexed filter ...\n";
	printf "	freq         --> %9.2f (Hz) ($$result_ref{ freq_d } : $$result_ref{ freq_a }(analog))\n", $$result_ref{ freq_d };
	printf "	q            --> %9.2f      ($$result_ref{ q_d })\n", $$result_ref{ q_d };
	printf "	q (as analog)--> %9.2f      ($$result_ref{ q_a })\n", $$result_ref{ q_a };
	printf "\n";
	printf "as HPF ...\n";
	printf "	gain_nyquist --> %9.2f (dB) ($$result_ref{ gain_nyquist })\n", $$result_ref{ gain_nyquist };
	printf "as BPF ...\n";
	printf "	cutoff gain  --> %9.2f (dB) ($$result_ref{ gain_cutoff })\n", $$result_ref{ gain_cutoff };
	if (defined($$result_ref{ mag_pkg }) && (abs($$result_ref{ mag_pkg }) < 1) && ($$result_ref{ mag_pkg } != 0)) {
		my $q_neg = $$result_ref{ q_d } / abs($$result_ref{ mag_pkg });
		printf "	q as cut     --> %9.2f (dB) ($q_neg)\n", $q_neg;
	}
	printf "as LPF ...\n";
	printf "	gain_dc      --> %9.2f (dB) ($$result_ref{ gain_dc })\n", $$result_ref{ gain_dc };
} else {
	print "unknown result type (" . $$result_ref { type } . ") returned\n";
	exit 1;
}
