#! /usr/local/bin/perl

use strict;
use FindBin;

require $FindBin::Bin . "/wav_util.pm";


sub usage {
	my $cmd = `basename $0`;
	chomp $cmd;
	print "-- wav to dat converter --\n";
	print "usage: $cmd inFile(*.wav) outFile(*.dat)\n";
	print "\n";
}

if ($#ARGV != 1) {
	usage();
	exit 1;
}



my @APF0;
my @APF1;
my @DCF0;
my @DCF1;

my $DCF00 =  0.999643937;		# DC Cut filter
my $DCF01 = -0.999643937;
my $DCF02 =  0.999287874;

sub Process {
	my ($data, $ch, $data_1_0) = @_;

	my $r3 = $data / $data_1_0 * 0.33333 + 0.33334;
	my $r7 = -$r3 * $r3 + 2.0;
	my $r6 =  $r3 * $r3 + 2.0;
	my $apfcoef = $r7 / $r6;

	$APF1[$ch] = -$data * $apfcoef + $APF1[$ch] * $apfcoef + $APF0[$ch];
	$APF0[$ch] = $data;

	return $APF1[$ch];

#	$DCF1[$ch] = $APF1[$ch] * $DCF00 + $DCF0[$ch] * $DCF01 + $DCF1[$ch] * $DCF02;
#	$DCF0[$ch] = $APF1[$ch];

#	printf("data: $data, %x\n", $data_1_0);

#	return $DCF1[$ch];
}

sub max {
	my ($a, $b) = @_;
	return ($a > $b) ? $a : $b;
}

#main

{
	my $infile = shift;
	my $outfile = shift;

	my $fhIn, my $fhOut;
	open($fhIn, "$infile") or die "cannot open $infile!\n";
	open($fhOut, "> $outfile") or die "cannot open $outfile!\n";
	binmode $fhIn;
	binmode $fhOut;

	my %infoHash;
	my @preChunkBuf, my @postChunkBuf;
	my $dataSize = wav_util::ReadWavHeader($fhIn, \%infoHash, \@preChunkBuf, \@postChunkBuf);
	wav_util::WriteWavHeader($fhOut, \@preChunkBuf);

	my $data_1_0 = 1.0;
	if ($infoHash{ "FORMAT_ID" } == 1) {
		if ($infoHash{ "BIT_LENGTH" } == 16) {
			$data_1_0 = 0x8000;
		} elsif ($infoHash{ "BIT_LENGTH" } == 24) {
			$data_1_0 = 0x8000 * 0x100;
		} elsif ($infoHash{ "BIT_LENGTH" } == 32) {
			$data_1_0 = 0x8000 * 0x10000;
		}
	}

	my $remain = $dataSize;
	while($remain > 0) {
		my @dataArray = wav_util::ReadWavData($fhIn, \%infoHash);

		for (my $i = 0; $i <= $#dataArray; $i++) {
			$dataArray[$i] = Process($dataArray[$i], $i, $data_1_0);
		}

		wav_util::WriteWavData($fhOut, \%infoHash, @dataArray);

		$remain -= $infoHash{ "BLOCK_SIZE" };
	}

	wav_util::WriteWavTrailer($fhOut, \@postChunkBuf);

	close ($fhIn);
	close ($fhOut);

	wav_util::MaintainWavHeader($outfile, \%infoHash, $dataSize);
}

