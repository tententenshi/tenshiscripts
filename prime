#! /usr/bin/env perl

use strict;


sub isNotPrime {
	my ($n) = @_;

	if ($n == 1) { return 1; }
	if ($n == 2) { return 0; }

	my $mod6 = $n % 6;
	if (($mod6 != 1) && ($mod6 != 5)) {
		if (($n & 1) == 0) {
			return 2;
		} else {
			return 3;
		}
	}

	for (my $i = 2; $i < sqrt($n); ++$i) {
		if ($n % $i == 0) {
			return $i;
		}
	}
	return 0;
}


sub usage {
	my $cmd = `basename $0`;
	chomp $cmd;
	print "usage: $cmd start_val - end_val\n";
	print "  (cf.) $cmd 1000 - 1200\n";
	exit 1;
}

if ($#ARGV < 0) {
	usage();
}

my $my_arg = join("", @ARGV);

if ($my_arg =~ /(.+)\-(.+)/) {
	my ($start, $end) = (eval($1), eval($2));

	for (my $val = $start; $val <= $end; $val++) {
		if (my $denom = isNotPrime($val)) {
#			print "$val is NOT prime (divided by $denom)\n";
		} else {
			print "$val\n";
		}
	}
} elsif (eval($my_arg) > 0) {
	my $val = eval($my_arg);

	if (my $denom = isNotPrime($val)) {
		print "$val is not prime (divided by $denom), candidate is...\n";
		my $candidate = $val;
		while (isNotPrime(--$candidate)) {}
		print "$candidate, ";
		my $candidate = $val;
		while (isNotPrime(++$candidate)) {}
		print "$candidate\n";
	} else {
		print "$val\n";
	}
} else {
	usage();
}

