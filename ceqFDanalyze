#! /usr/local/bin/perl

sub round {
	my($val) = @_;
	if ($val >= 0) { $val += 0.5; }
	else { $val -= 0.5; }
	return int($val);
}

sub hex2dec {
	my ($val) = @_;

	while ($val =~ /^(.*)(0[Xx][\da-fA-F]+)(.*)$/) {
		my ($pre, $hex, $post) = ($1, $2, $3);
		if ($hex =~ /0[Xx][\da-fA-F]{6}/) {			# CoefData
			$VAL1_0 = 0x00800000;
			$VAL_POS_MAX = 0x80000000;
		} else {
			$VAL1_0 = 0x8000;
			$VAL_POS_MAX = 0x8000;
		}
		my $dec;
		if (eval($hex) >= $VAL_POS_MAX) {
			$dec = (eval($hex) - $VAL_POS_MAX * 2) / $VAL1_0;
		} else {
			$dec = eval($hex) / $VAL1_0;
		}
		$val = $pre . $dec . $post;
	}
	$val =~ s/<</*2**/g;
	$val =~ s/>>/*2**-/g;
	return eval($val);
}

sub tan { sin($_[0]) / cos($_[0]); }

if ($#ARGV != 3) {
	my $cmd = `basename $0`;
	chomp $cmd;
	print "usage: $cmd att a0 a1 Fs\n";
	print "           +-----------------|>---+\n";
	print "           |                (a1)  |\n";
	print "           |                      V\n";
	print " --|>--(+)---|>--(+)-----+---|>--(+)--\n";
	print "  att    \\   a0    \\     |  (a1)\n";
	print "          \\         \\   [ ] \n";
	print "           \\         \\   |  \n";
	print "            +---<|----+--+  \n";
	print "                -1\n";
	exit 1;
}

$att = shift;
$a0 = shift;
$a1 = shift;
$Fs = eval(shift);

$att = ($att =~ /0[Xx]/) ? hex2dec($att) : eval($att);
$a0  = ($a0  =~ /0[Xx]/) ? hex2dec($a0 ) : eval($a0);
$a1  = ($a1  =~ /0[Xx]/) ? hex2dec($a1 ) : eval($a1);

$pi = 4 * atan2(1, 1);

# HSV
$a0_hsv = $att * $a1;
$a1_hsv = $att * ($a0 - $a1);
$b1_hsv = 1 - $a0;

# LSV
$a0_lsv = $att;
$a1_lsv = $att * ($a0 * $a1 - 1);
$b1_lsv = 1 - $a0;

# HPF
$a0_hpf = $att;
$a1_hpf = -$att;
$b1_hpf = 1 - $a0;

# LPF
$a0_lpf = $att * $a0;
$a1_lpf = 0;
$b1_lpf = 1 - $a0;



print "as HSV ...\n";
system ("./ceqFAanalyze $a0_hsv $a1_hsv $b1_hsv $Fs");
print "\n";

print "as LSV ...\n";
system ("./ceqFAanalyze $a0_lsv $a1_lsv $b1_lsv $Fs");
print "\n";

print "as HPF ...\n";
system ("./ceqFAanalyze $a0_hpf $a1_hpf $b1_hpf $Fs");
print "\n";

print "as LPF ...\n";
system ("./ceqFAanalyze $a0_lpf $a1_lpf $b1_lpf $Fs");
